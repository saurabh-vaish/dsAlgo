
#https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html

#----------------   spring server properties  ---------------

#Whether response compression is enabled.
server.compression.enabled = false

#Comma-separated list of MIME types that should be compressed.
server.compression.mime-types = [text/html, text/xml, text/plain, text/css, text/javascript, application/javascript, application/json, application/xml]

#Minimum "Content-Length" value that is required for compression to be performed.
server.compression.min-response-size = 2KB

#Path of the error controller.
server.error.path = /error

#Maximum size of the HTTP message header.
server.max-http-header-size = 8KB

#Server HTTP port.
server.port = 8080

#Display name of the application.
server.servlet.application-display-name = application

#Context path of the application.
server.servlet.context-path = /

server.servlet.encoding.charset = UTF-8

#-------------------- spring data properties ------------------

spring.datasource.driverClassName= org.postgresql.Driver
spring.datasource.url = jdbc:postgresql://localhost:5432/dbname
spring.datasource.username = username
spring.datasource.password = password

#spring.datasource.jndi-name = JNDI location of the datasource. Class, url, username and password are ignored when set.

# jpa / hibernate
spring.jpa.show-sql = true
spring.jpa.generate-ddl = true
spring.jpa.hibernate.ddl-auto = update

#Fully qualified name of the implicit naming strategy.
spring.jpa.hibernate.naming.strategy= org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
#spring.jpa.properties.org.hibernate.envers.default_schema=tdis_msi_audit

spring.datasource.dbcp.test-while-idle= true
spring.datasource.dbcp.validation-query= SELECT 1

#Default page size.
spring.data.web.pageable.default-page-size = 20

#Maximum page size to be accepted.
spring.data.web.pageable.max-page-size = 2000

#Whether to expose and assume 1-based page number indexes. Defaults to "false", meaning a page number of 0 in the request equals the first page.
spring.data.web.pageable.one-indexed-parameters = false

# ******** For mongo db ********

#Authentication database name.
spring.data.mongodb.authentication-database = auth-db name

#Database name.
spring.data.mongodb.database=tdis

#Mongo server host. Cannot be set with URI.
spring.data.mongodb.host=localhost

#Mongo server port. Cannot be set with URI.
spring.data.mongodb.port=27017

#Mongo database URI. Cannot be set with host, port, credentials and replica set name.
spring.data.mongodb.uri = mongodb://localhost/test

#spring.data.mongodb.authentication-database=tdis

#Login user of the mongo server. Cannot be set with URI.
spring.data.mongodb.username= username

#Login password of the mongo server. Cannot be set with URI.
spring.data.mongodb.password= password

#Whether to enable auto-index creation.
spring.data.mongodb.auto-index-creation = true

#spring.data.mongodb.field-naming-strategy = Fully qualified name of the FieldNamingStrategy to use.

#GridFS bucket name.
spring.data.mongodb.gridfs.bucket = file-bucket name

#GridFS database name.
spring.data.mongodb.gridfs.database = file-db name

#Type of Mongo repositories to enable.
spring.data.mongodb.repositories.type=auto


# ---------------- spring data redis properties --------------------------

#Client name to be set on connections with CLIENT SETNAME.
spring.redis.client-name = redis

#Connection timeout.
spring.redis.connect-timeout = 5000

#Database index used by the connection factory.
spring.redis.database = 0

#Redis server host
spring.redis.host = localhost

#Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.jedis.pool.max-active = 8

#Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.jedis.pool.max-idle = 8

#Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.jedis.pool.max-wait = -1ms

#Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if both it and time between eviction runs are positive.
spring.redis.jedis.pool.min-idle = 0

#Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.lettuce.pool.max-active = 8

#Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.lettuce.pool.max-idle = 8

#Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.lettuce.pool.max-wait = -1ms

#Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if both it and time between eviction runs are positive.
spring.redis.lettuce.pool.min-idle = 0

#Login password of the redis server.
spring.redis.password = redis pass

#Redis server port.
spring.redis.port = 6379

#Read timeout.
spring.redis.timeout = 5000

#Connection URL. Overrides host, port, and password. User is ignored. [ host & port ]
spring.redis.url = redis://user:password@example.com:6379

#Login username of the redis server.
spring.redis.username = username


# ---------------- spring r2bc properties -----------------

#Database name. Set if no name is specified in the url. Default to "testdb" when using an embedded database.
spring.r2dbc.name = dbname

#Login password of the database. Set if no password is specified in the url.
spring.r2dbc.password = password

#Whether pooling is enabled. Enabled automatically if "r2dbc-pool" is on the classpath.
spring.r2dbc.pool.enabled = true

#Initial connection pool size.
spring.r2dbc.pool.initial-size = 10

#Maximum amount of time that a connection is allowed to sit idle in the pool.
spring.r2dbc.pool.max-idle-time = 30m

#Maximal connection pool size.
spring.r2dbc.pool.max-size = 10

#spring.r2dbc.properties.* = Additional R2DBC options.

#R2DBC URL of the database. database name, username, password and pooling options specified in the url take precedence over individual options.
spring.r2dbc.url = jdbc://postgresql://localhost:5432/db-name

#Login username of the database. Set if no username is specified in the url.
spring.r2dbc.username = username


#----------------   spring aop properties  ---------------

#Add @EnableAspectJAutoProxy.
spring.aop.auto = true

#Whether subclass-based (CGLIB) proxies are to be created (true), as false then standard Java interface-based proxies will be created
spring.aop.proxy-target-class = true

#----------------   spring application properties  ---------------

#Auto-configuration classes to exclude. [ array of fully qualified class names ]
spring.autoconfigure.exclude = com.app.className

#Whether to enable admin features for the application.
spring.application.admin.enabled = false

#JMX name of the application admin MBean.
spring.application.admin.jmx-name = org.springframework.boot:type=Admin,name=SpringApplication

#Application name
spring.application.name = app name


#----------------   spring banner properties  ---------------

#Banner file encoding.
spring.banner.charset = UTF-8

#Banner text resource location.
spring.banner.location = classpath:banner.txt

#Whether to skip search of BeanInfo classes.
spring.beaninfo.ignore = true

#----------------   spring main properties  ---------------

#Mode used to display the banner when the application runs.
spring.main.banner-mode = console

#Whether initialization should be performed lazily.
spring.main.lazy-initialization = false

#Whether to log information about the application when it starts.
spring.main.log-startup-info = true

#----------------   spring profile properties  ---------------

#Name of the profile to enable if no profile is active.
spring.profiles.default = default

#Unconditionally activate the specified comma-separated list of profiles (or list of profiles if using YAML).
spring.profiles.include = dev

#----------------   spring task properties  ---------------

#Whether core threads are allowed to time out. This enables dynamic growing and shrinking of the pool.
spring.task.execution.pool.allow-core-thread-timeout = true

#Core number of threads. [ should be based on system cpu ]
spring.task.execution.pool.core-size = 8

#Time limit for which threads may remain idle before being terminated.
spring.task.execution.pool.keep-alive = 60s

#Maximum allowed number of threads. If tasks are filling up the queue, the pool can expand up to that size to accommodate the load.
# Ignored if the queue is unbounded. should be based on app req
spring.task.execution.pool.max-size = 10

#Queue capacity. An unbounded capacity does not increase the pool and therefore ignores the "max-size" property.
spring.task.execution.pool.queue-capacity = 10

#Whether the executor should wait for scheduled tasks to complete on shutdown.
spring.task.execution.shutdown.await-termination = false

#Prefix to use for the names of newly created threads.
spring.task.execution.thread-name-prefix = task-

#Maximum allowed number of threads.
spring.task.scheduling.pool.size = 1

#Whether the executor should wait for scheduled tasks to complete on shutdown.
spring.task.scheduling.shutdown.await-termination = false

#Prefix to use for the names of newly created threads.
spring.task.scheduling.thread-name-prefix = scheduling-


#----------------   spring mvc properties  ---------------

#Path of the dispatcher servlet. Setting a custom value for this property is not compatible with the PathPatternParser matching strategy.
spring.mvc.servlet.path = /

#Path pattern used for static resources.
spring.mvc.static-path-pattern = /**

#Spring MVC view prefix.
spring.mvc.view.prefix = view

#Spring MVC view suffix.
spring.mvc.view.suffix = .jsp

#Date format to use, for example `dd/MM/yyyy`.
spring.mvc.format.date = dd/MM/yyyy

#Date-time format to use, for example `yyyy-MM-dd HH:mm:ss`.
spring.mvc.format.date-time = yyyy-MM-dd HH:mm:ss

#Time format to use, for example `HH:mm:ss`.
spring.mvc.format.time = HH:mm:ss


#----------------   spring servlet properties  ---------------

#Whether to enable support of multipart uploads.
spring.servlet.multipart.enabled = true

#Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold = 0B

#Intermediate location of uploaded files.
spring.servlet.multipart.location = /temp

#Max file size.
spring.servlet.multipart.max-file-size = 1MB

#Max request size.
spring.servlet.multipart.max-request-size = 10MB

#Locations of static resources. Defaults to classpath:[/META-INF/resources/, /resources/, /static/, /public/].
spring.web.resources.static-locations = [classpath:/META-INF/resources/, classpath:/resources/, classpath:/static/, classpath:/public/]

#Base path for all web handlers.
spring.webflux.base-path = /

#Path pattern used for static resources.
spring.webflux.static-path-pattern = /**


#----------------   spring mail properties  ---------------

# smtp host name
spring.mail.host = smtp.gmail/sendgrid.com 
# smtp port name
spring.mail.port = 587
spring.mail.username = username
spring.mail.password = password

# default encoding for mail content
spring.mail.default-encoding = UTF-8
spring.mail.protocol = smtp

spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.connectiontimeout = 5000
spring.mail.properties.mail.smtp.writetimeout = 5000
spring.mail.properties.mail.smtp.starttls.enable = false
spring.mail.properties.mail.smtp.starttls.required	= true

#For send grid
spring.sendgrid.api-key	= api key
spring.sendgrid.proxy.host = smtp.sendgrid.com
spring.sendgrid.proxy.port = 587

#----------------   jackson properties  ---------------

# Date format string or a fully-qualified date format class name
spring.jackson.date-format = yyyy-MM-dd HH:mm:ss

# time-zone used while formatting dates
spring.jackson.time-zone = GMT+10 or Asia/Kolkata

# pretty print json value
spring.jackson.serialization.indent_output = false

# throws exception if a object is null on serialization
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS = true

#spring.jackson.deserialization.*	properties that used in deserialization process
#spring.jackson.mapper.*	Jackson properties related with mappers
#spring.jackson.parser.*	Jackson Properties realated with parsers

#----------------   logging properties  ---------------

#Location of the logging configuration file. For instance, `` for Logback.
logging.config = classpath:logback.xml
# Log file name . Names can be an exact location or relative to the current directory.
logging.file.name = app.log
# Location of the log file.
logging.file.path = /var/log

#logging.level.* = Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.

# root level logging
logging.level.root=INFO
# spring framework related logging
logging.level.org.springframework.orm=DEBUG
logging.level.org.springframework.data=DEBUG
logging.level.org.springframework.web=ERROR
# for mongo logs
logging.level.org.springframework.data.mongodb.core.index=OFF

# hibernate level logging
logging.level.org.hibernate=ERROR

# loggig for custom package or own product classes
logging.level.co.app=DEBUG

#Maximum log file size.
logging.logback.rollingpolicy.max-file-size = 10MB

#Maximum number of days archive log files are kept.
logging.logback.rollingpolicy.max-history = 7

#Appender pattern for log date format. Supported only with the default Logback setup.
logging.pattern.dateformat =yyyy-MM-dd HH:mm:ss.SSS

#Appender pattern for output to a file. Supported only with the default Logback setup.
logging.pattern.file = %d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}


# -------------------- spring security properties -------------------------------


#Default user name.
spring.security.user.name = user

#Password for the default user name.
spring.security.user.password = password

#Granted roles for the default user name.
spring.security.user.roles = [ADMIN,CLIENT]

#spring.security.oauth2.client.provider.* = OAuth provider details.

#spring.security.oauth2.client.registration.* = OAuth client registrations.

#URI that can either be an OpenID Connect discovery endpoint or an OAuth 2.0 Authorization Server Metadata endpoint defined by RFC 8414.
#spring.security.oauth2.resourceserver.jwt.issuer-uri

#JSON Web Key URI to use to verify the JWT token.
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri

#JSON Web Algorithm used for verifying the digital signatures.
spring.security.oauth2.resourceserver.jwt.jws-algorithm = RS256

#Location of the file containing the public key used to verify a JWT.
#spring.security.oauth2.resourceserver.jwt.public-key-location

#Client id used to authenticate with the token introspection endpoint.
#spring.security.oauth2.resourceserver.opaquetoken.client-id

#Client secret used to authenticate with the token introspection endpoint.
#spring.security.oauth2.resourceserver.opaquetoken.client-secret

#OAuth 2.0 endpoint through which token introspection is accomplished.
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri


# -------------------------- spring actuator properties

#Whether to enable the info endpoint.
management.endpoint.info.enabled = true

#Whether to enable the metrics endpoint.
management.endpoint.metrics.enabled = true

#Whether to enable the beans endpoint.
management.endpoint.beans.enabled = true

#Whether to enable the health endpoint.
management.endpoint.health.enabled = true

# when to show full health details
management.endpoint.health.show-details=ALWAYS

management.endpoints.web.base-path=/manage
management.endpoints.web.exposure.include=*

management.context-path=/actuator






